JAVA is owned by sun microsystems now ,it is owned by ORACLE CORPORAION





_____________________________________________________________________________________________________________
java buzzle words---> features offered by java
*simple: 
*secure:JRE provides security
*compiled and interpreture
*portable: java byte code can be executed on any other OS
*Architecture neutral: byte code is executable on nay hardware architecture:
*object oriented: abstraction, classes, objects,inheritance
*Robust---> it is very huge
*multi threaded:large programs will split and run in parallel , which can reduce time and saves the system resources
*high performance: java byte code is "close" to native code.It is still a little bit slower
                   than  compiled language ex: c++ because it is interpreted language
*distributed: because it faciliated users to distributed applications in java
              ---->	RMI and EJB are used for creating distributed applications
* dynamic: supports on demand classes  loading and binding.provides dynamic management
*scalable/ extensible: in future new API's can be added to existing API's for java applications
-------------------------------------------------------------------------------------------------------------
############EVOLUTION################
*1990: sun decided to develop special software that could be used for electroni cdevices. A Project called
       green project created and headed by james gosling
*1991: exploed possibility of using c++ , with some updates of announced a new language called "Oak"
*1992:using hand held device contrled home applications
*1998: sun microsystems accepting API's from other for expanding libraries
*
________________________________________________________________________________________________________________________
Version	          Release
                    date	End of Free
                                Public Updates[5][6]	                                Extended
                                                                                       Support Until
--------------------------------------------------------------------------------------------------------------------------
JDK Beta	1995	?	?
JDK 1.0	January 1996	?	?
JDK 1.1	February 1997	?	?
J2SE 1.2	December 1998	?	?
J2SE 1.3	May 2000	?	?
J2SE 1.4	February 2002	October 2008	                                     February 2013
J2SE 5.0	September 2004	November 2009	                                         April 2015
Java SE 6	December 2006	April 2013	                                        December 2018
Java SE 7	July 2011	April 2015	                                        July 2022
Java SE 8 (LTS)	March 2014	January 2019 for Oracle (commercial)
                                December 2020 for Oracle (personal use)
                                 At least May 2026 for AdoptOpenJDK
                                 At least May 2026[7] for Amazon Corretto	       December 2030
Java SE 9	September 2017	March 2018 for OpenJDK	                                      N/A
Java SE 10	March 2018	September 2018 for OpenJDK	                               N/A
Java SE 11 (LTS)September 2018	At least September 2027[7] for Amazon Corretto
                                        October 2024 for AdoptOpenJDK	                 September 2026
Java SE 12	March 2019	September 2019 for OpenJDK	                                N/A
Java SE 13	September 2019	March 2020 for OpenJDK	                                        N/A
Java SE 14(latest)March 2020	September 2020 for OpenJDK	                                N/A
Java SE 15	September 2020	March 2021 for OpenJDK	                                        N/A  
Java SE 16	March 2021	September 2021 for OpenJDK	                                N/A
Java SE 17 (LTS)September 2021	TBA	                                                        TBA
-----------------------------------------------------------------------------------------------------------------------------
Editions of JAVA : JSE--->Java Standard Edition--> it develops applications which can runs single computer-->1st it have to be installed 
                                                                                                             later JME OR JEE
                   JME-->Java Micro Edition------>to develop micro device applications[beacuse of its potential difference ]
                   JEE--> Java Enterprise Edition-->
______________________________________________________________________________________________________________________________
-----------------------JAVA ARCHTITURE--------------
java code will save as --> (.java)---->input to java compiler---> generates bytecode(.class)
bytecode will save as --> (.class)
*bytecode:
*PROGRAM WILL HAVE SET OF INSTRUCTIONS ,SOME ARE dependent on instructions of machines and some are independent. 
*bytecode will have 2 set of instructions---->depending java instructions(specific to the machine)
                                         ---->independent instructions(will be translated into machine language.)
*independent actions are done by independet os archtitecture(in this java compiler will help)
*dependent ations are done by dependent os archtiture(in this JVM will support to run)
*JVM ---> Java virtual machines--> corresponding JVM is used to compile bytecode into executable code to machine
                               -->specific to the operating system
____________________________________________________________________________________________________________________
##########################    JAVA and Internet   ############################



*********************************************************************************************************************
====================================================part -2==========================================================
c,COBOL,basics-->procedural programming paradigm
c++,java ,python-->Object oriented language
go language --> used for google search engine--> control over the threads is difficult
____________________________________________________________________________________________________________________
~~~~~~~~~~~~~~~~~~~~~~~~~Procedural programming:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*first programming paradigm:
* focuse on what to do
* pure imperarive model: concentrates on required steps
*use structural approach
*static in nature
*source code is portable
*focuses on flow control
*local and global declaration is possible
*uses recursion to retrive data: recursive uses  run time heat--> most timee consuming --> poor efficiency
* time consuming at run time
*needs more memory at runtime
*hence poor efficiency over other paradigms
_____________________________________________________________________________________________________________________
~~~~~~~~~~~~~~~~~~~~~~OBJECT ORIENTED PROGRAMMING~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*focuses on what to do and how to do
*both imperative and declaritive programmings models are used i.e; flow control and logic
*dynamic in nature
*offers reusability in various ways
*uses no recursive approaches to iterate on lists or colections
*mimics real world or easily applicable to real world scenerio
*offers protection to program elements from other programs
*compiled code portability: compiled code can be moved to any other OS
* optimized time and space consumptions during runtime
_______________________________________________________________________________________________________________________
**************OOPS Features*************
*classes:it has common entity like attributes, behaviors 
*objects:specific examples of entity
*encaptulation: tablet capsules: combining data and core in one unit is called encaptulation
                              -->grouping classes and objects in one unit 
*inheritance:aquring properties from parent(supercalss) class to child(suclass) class is celled inheritance
 ---> single
 ---> multiple
 --->

 advantages : code reusability
              length of code can be reduced by using classe and inheritance
*Abstraction:providing access for the necessery members to class
*polymorphism
*
